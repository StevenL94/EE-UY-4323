// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "acc_b.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic acc_b::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic acc_b::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> acc_b::ap_ST_st1_fsm_0 = "1";
const sc_lv<5> acc_b::ap_ST_st2_fsm_1 = "10";
const sc_lv<5> acc_b::ap_ST_st3_fsm_2 = "100";
const sc_lv<5> acc_b::ap_ST_st4_fsm_3 = "1000";
const sc_lv<5> acc_b::ap_ST_st5_fsm_4 = "10000";
const sc_lv<32> acc_b::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> acc_b::ap_const_lv1_1 = "1";
const sc_lv<1> acc_b::ap_const_lv1_0 = "0";
const sc_lv<32> acc_b::ap_const_lv32_4 = "100";

acc_b::acc_b(sc_module_name name) : sc_module(name), mVcdFile(0) {
    acc_b_fadd_32ns_32ns_32_5_full_dsp_U0 = new acc_b_fadd_32ns_32ns_32_5_full_dsp<1,5,32,32,32>("acc_b_fadd_32ns_32ns_32_5_full_dsp_U0");
    acc_b_fadd_32ns_32ns_32_5_full_dsp_U0->clk(ap_clk);
    acc_b_fadd_32ns_32ns_32_5_full_dsp_U0->reset(ap_rst);
    acc_b_fadd_32ns_32ns_32_5_full_dsp_U0->din0(cnt);
    acc_b_fadd_32ns_32ns_32_5_full_dsp_U0->din1(b_in);
    acc_b_fadd_32ns_32ns_32_5_full_dsp_U0->ce(grp_fu_39_ce);
    acc_b_fadd_32ns_32ns_32_5_full_dsp_U0->dout(grp_fu_39_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( cnt_loc_phi_fu_33_p4 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_ap_sig_bdd_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_21 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_53 );

    SC_METHOD(thread_b_en_read_read_fu_18_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( b_en );

    SC_METHOD(thread_cnt_loc_phi_fu_33_p4);
    sensitive << ( b_en_read_read_fu_18_p2 );
    sensitive << ( cnt_loc_reg_30 );
    sensitive << ( grp_fu_39_p2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_grp_fu_39_ce);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( b_en_read_read_fu_18_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    cnt = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "acc_b_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, b_in, "(port)b_in");
    sc_trace(mVcdFile, b_en, "(port)b_en");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_21, "ap_sig_bdd_21");
    sc_trace(mVcdFile, cnt, "cnt");
    sc_trace(mVcdFile, b_en_read_read_fu_18_p2, "b_en_read_read_fu_18_p2");
    sc_trace(mVcdFile, cnt_loc_phi_fu_33_p4, "cnt_loc_phi_fu_33_p4");
    sc_trace(mVcdFile, cnt_loc_reg_30, "cnt_loc_reg_30");
    sc_trace(mVcdFile, grp_fu_39_p2, "grp_fu_39_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_53, "ap_sig_bdd_53");
    sc_trace(mVcdFile, grp_fu_39_ce, "grp_fu_39_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("acc_b.hdltvin.dat");
    mHdltvoutHandle.open("acc_b.hdltvout.dat");
}

acc_b::~acc_b() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete acc_b_fadd_32ns_32ns_32_5_full_dsp_U0;
}

void acc_b::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(b_en_read_read_fu_18_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        cnt_loc_reg_30 = grp_fu_39_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                !esl_seteq<1,1,1>(b_en_read_read_fu_18_p2.read(), ap_const_lv1_0))) {
        cnt_loc_reg_30 = cnt.read();
    }
    if ((esl_seteq<1,1,1>(b_en_read_read_fu_18_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        cnt = grp_fu_39_p2.read();
    }
}

void acc_b::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void acc_b::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void acc_b::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void acc_b::thread_ap_return() {
    ap_return = cnt_loc_phi_fu_33_p4.read();
}

void acc_b::thread_ap_sig_bdd_21() {
    ap_sig_bdd_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void acc_b::thread_ap_sig_bdd_53() {
    ap_sig_bdd_53 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void acc_b::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void acc_b::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_53.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void acc_b::thread_b_en_read_read_fu_18_p2() {
    b_en_read_read_fu_18_p2 = b_en.read();
}

void acc_b::thread_cnt_loc_phi_fu_33_p4() {
    if ((esl_seteq<1,1,1>(b_en_read_read_fu_18_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        cnt_loc_phi_fu_33_p4 = grp_fu_39_p2.read();
    } else {
        cnt_loc_phi_fu_33_p4 = cnt_loc_reg_30.read();
    }
}

void acc_b::thread_grp_fu_39_ce() {
    grp_fu_39_ce = ap_const_logic_1;
}

void acc_b::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(b_en_read_read_fu_18_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(b_en_read_read_fu_18_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void acc_b::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_in\" :  \"" << b_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_en\" :  \"" << b_en.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

